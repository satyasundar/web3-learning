{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc1118cf30c83ac4fd1b660c808f518a059a4c6d0fd48ed9fbe83b06fa411e098",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1023532",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1edbea5d7547bb4cece2ace1c1b085ac717f07a75ef756012e8d5e429cdf1787",
    "transactionHash": "0xc1118cf30c83ac4fd1b660c808f518a059a4c6d0fd48ed9fbe83b06fa411e098",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1023532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "1f0b165092360c1e0b7abde9475b6cf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] public s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    // function getVersion() public view returns (uint256){\\n    //     // ETH/USD price feed address of Goerli Network.\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    //     return priceFeed.version();\\n    // }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x70057f1a4adceb4a34299e6527c3d748d423479cf12570854df4ef3807202dc3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xe1619c2bdba885921e858a20708437ef1038503c259e01235179927c1b3be4ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012ac380380620012ac833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111266200018660003960008181610312015281816105c8015281816107be015261085601526111266000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610154578063b60d42881461017f578063be2693f014610189578063dba6335f146101935761008e565b80631bf6132d146100985780633ccfd60b146100d557806354861af7146100ec5780636b69a592146101295761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a5e565b6102f8565b6040516100cc9190610aa4565b60405180910390f35b3480156100e157600080fd5b506100ea610310565b005b3480156100f857600080fd5b50610113600480360381019061010e9190610aeb565b610550565b6040516101209190610b27565b60405180910390f35b34801561013557600080fd5b5061013e61058f565b60405161014b9190610aa4565b60405180910390f35b34801561016057600080fd5b5061016961059c565b6040516101769190610ba1565b60405180910390f35b6101876101be565b005b6101916105c6565b005b34801561019f57600080fd5b506101a8610854565b6040516101b59190610b27565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087890919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c19565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610c68565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610395576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610440576000600182815481106103bb576103ba610cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061043890610ced565b915050610398565b50600067ffffffffffffffff81111561045c5761045b610d36565b5b60405190808252806020026020018201604052801561048a5781602001602082028036833780820191505090505b50600190805190602001906104a0929190610954565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104c790610d96565b60006040518083038185875af1925050503d8060008114610504576040519150601f19603f3d011682016040523d82523d6000602084013e610509565b606091505b505090508061054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490610df7565b60405180910390fd5b50565b6001818154811061056057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610685575b5050505050905060005b81518110156107595760008282815181106106f7576106f6610cbe565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075190610ced565b9150506106d9565b50600067ffffffffffffffff81111561077557610774610d36565b5b6040519080825280602002602001820160405280156107a35781602001602082028036833780820191505090505b50600190805190602001906107b9929190610954565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080090610d96565b60006040518083038185875af1925050503d806000811461083d576040519150601f19603f3d011682016040523d82523d6000602084013e610842565b606091505b505090508061085057600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610884836108b4565b90506000670de0b6b3a7640000858361089d9190610e17565b6108a79190610ea0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190610f5e565b5050509150506402540be4008161094c9190610fd9565b915050919050565b8280548282559060005260206000209081019282156109cd579160200282015b828111156109cc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610974565b5b5090506109da91906109de565b5090565b5b808211156109f75760008160009055506001016109df565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2b82610a00565b9050919050565b610a3b81610a20565b8114610a4657600080fd5b50565b600081359050610a5881610a32565b92915050565b600060208284031215610a7457610a736109fb565b5b6000610a8284828501610a49565b91505092915050565b6000819050919050565b610a9e81610a8b565b82525050565b6000602082019050610ab96000830184610a95565b92915050565b610ac881610a8b565b8114610ad357600080fd5b50565b600081359050610ae581610abf565b92915050565b600060208284031215610b0157610b006109fb565b5b6000610b0f84828501610ad6565b91505092915050565b610b2181610a20565b82525050565b6000602082019050610b3c6000830184610b18565b92915050565b6000819050919050565b6000610b67610b62610b5d84610a00565b610b42565b610a00565b9050919050565b6000610b7982610b4c565b9050919050565b6000610b8b82610b6e565b9050919050565b610b9b81610b80565b82525050565b6000602082019050610bb66000830184610b92565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c03601b83610bbc565b9150610c0e82610bcd565b602082019050919050565b60006020820190508181036000830152610c3281610bf6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610a8b565b9150610c7e83610a8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cb357610cb2610c39565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf882610a8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2b57610d2a610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d80600083610d65565b9150610d8b82610d70565b600082019050919050565b6000610da182610d73565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de1600b83610bbc565b9150610dec82610dab565b602082019050919050565b60006020820190508181036000830152610e1081610dd4565b9050919050565b6000610e2282610a8b565b9150610e2d83610a8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6657610e65610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eab82610a8b565b9150610eb683610a8b565b925082610ec657610ec5610e71565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef081610ed1565b8114610efb57600080fd5b50565b600081519050610f0d81610ee7565b92915050565b6000819050919050565b610f2681610f13565b8114610f3157600080fd5b50565b600081519050610f4381610f1d565b92915050565b600081519050610f5881610abf565b92915050565b600080600080600060a08688031215610f7a57610f796109fb565b5b6000610f8888828901610efe565b9550506020610f9988828901610f34565b9450506040610faa88828901610f49565b9350506060610fbb88828901610f49565b9250506080610fcc88828901610efe565b9150509295509295909350565b6000610fe482610f13565b9150610fef83610f13565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102e5761102d610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106b5761106a610c39565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a8576110a7610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e5576110e4610c39565b5b82820290509291505056fea26469706673582212200069897226b0e769fa4464db754c1aea4b72c47afa55cf0d032e7b6e374003d764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610154578063b60d42881461017f578063be2693f014610189578063dba6335f146101935761008e565b80631bf6132d146100985780633ccfd60b146100d557806354861af7146100ec5780636b69a592146101295761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a5e565b6102f8565b6040516100cc9190610aa4565b60405180910390f35b3480156100e157600080fd5b506100ea610310565b005b3480156100f857600080fd5b50610113600480360381019061010e9190610aeb565b610550565b6040516101209190610b27565b60405180910390f35b34801561013557600080fd5b5061013e61058f565b60405161014b9190610aa4565b60405180910390f35b34801561016057600080fd5b5061016961059c565b6040516101769190610ba1565b60405180910390f35b6101876101be565b005b6101916105c6565b005b34801561019f57600080fd5b506101a8610854565b6040516101b59190610b27565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087890919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c19565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610c68565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610395576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610440576000600182815481106103bb576103ba610cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061043890610ced565b915050610398565b50600067ffffffffffffffff81111561045c5761045b610d36565b5b60405190808252806020026020018201604052801561048a5781602001602082028036833780820191505090505b50600190805190602001906104a0929190610954565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104c790610d96565b60006040518083038185875af1925050503d8060008114610504576040519150601f19603f3d011682016040523d82523d6000602084013e610509565b606091505b505090508061054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054490610df7565b60405180910390fd5b50565b6001818154811061056057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610685575b5050505050905060005b81518110156107595760008282815181106106f7576106f6610cbe565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075190610ced565b9150506106d9565b50600067ffffffffffffffff81111561077557610774610d36565b5b6040519080825280602002602001820160405280156107a35781602001602082028036833780820191505090505b50600190805190602001906107b9929190610954565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080090610d96565b60006040518083038185875af1925050503d806000811461083d576040519150601f19603f3d011682016040523d82523d6000602084013e610842565b606091505b505090508061085057600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610884836108b4565b90506000670de0b6b3a7640000858361089d9190610e17565b6108a79190610ea0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190610f5e565b5050509150506402540be4008161094c9190610fd9565b915050919050565b8280548282559060005260206000209081019282156109cd579160200282015b828111156109cc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610974565b5b5090506109da91906109de565b5090565b5b808211156109f75760008160009055506001016109df565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2b82610a00565b9050919050565b610a3b81610a20565b8114610a4657600080fd5b50565b600081359050610a5881610a32565b92915050565b600060208284031215610a7457610a736109fb565b5b6000610a8284828501610a49565b91505092915050565b6000819050919050565b610a9e81610a8b565b82525050565b6000602082019050610ab96000830184610a95565b92915050565b610ac881610a8b565b8114610ad357600080fd5b50565b600081359050610ae581610abf565b92915050565b600060208284031215610b0157610b006109fb565b5b6000610b0f84828501610ad6565b91505092915050565b610b2181610a20565b82525050565b6000602082019050610b3c6000830184610b18565b92915050565b6000819050919050565b6000610b67610b62610b5d84610a00565b610b42565b610a00565b9050919050565b6000610b7982610b4c565b9050919050565b6000610b8b82610b6e565b9050919050565b610b9b81610b80565b82525050565b6000602082019050610bb66000830184610b92565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c03601b83610bbc565b9150610c0e82610bcd565b602082019050919050565b60006020820190508181036000830152610c3281610bf6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610a8b565b9150610c7e83610a8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cb357610cb2610c39565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cf882610a8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2b57610d2a610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d80600083610d65565b9150610d8b82610d70565b600082019050919050565b6000610da182610d73565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de1600b83610bbc565b9150610dec82610dab565b602082019050919050565b60006020820190508181036000830152610e1081610dd4565b9050919050565b6000610e2282610a8b565b9150610e2d83610a8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6657610e65610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eab82610a8b565b9150610eb683610a8b565b925082610ec657610ec5610e71565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef081610ed1565b8114610efb57600080fd5b50565b600081519050610f0d81610ee7565b92915050565b6000819050919050565b610f2681610f13565b8114610f3157600080fd5b50565b600081519050610f4381610f1d565b92915050565b600081519050610f5881610abf565b92915050565b600080600080600060a08688031215610f7a57610f796109fb565b5b6000610f8888828901610efe565b9550506020610f9988828901610f34565b9450506040610faa88828901610f49565b9350506060610fbb88828901610f49565b9250506080610fcc88828901610efe565b9150509295509295909350565b6000610fe482610f13565b9150610fef83610f13565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102e5761102d610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106b5761106a610c39565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a8576110a7610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110e5576110e4610c39565b5b82820290509291505056fea26469706673582212200069897226b0e769fa4464db754c1aea4b72c47afa55cf0d032e7b6e374003d764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}